save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path, file=file.path(save.dir.git, "specimens-complete.Rdata"))
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path, file=file.path(save.dir.git, "specimens-complete.Rdata"))
library(piecewiseSEM)#
library(nlme)
install.packages("piecewiseSEM")
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)
load("../data/specimens-complete.Rdata")
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Prusch"]  <- "PruschPark"#
#
## community health metrics#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
par.path$BeeDensity <- par.path$BeeAbund/par.path$Size#
par.path$BeeRichnessArea <- par.path$BeeRichness/par.path$Size#
#
par.path$WoodyFlowerDensity <- par.path$AbundWoodyFlowers/par.path$Size#
par.path$AnnualFlowerDenisty <-#
    par.path$AbundAnnualFlowers/par.path$Size#
par.path$PlantRichnessArea <- par.path$PlantRichness/par.path$Size#
#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path, file=file.path(save.dir.git, "specimens-complete.Rdata"))
par.path$ParasiteRichness <- sum(par.path[,"Phorid Crithidia Apicystis"])
## community health metrics#
par.path$ParasiteRichness <- sum(par.path[,c("Phorid", "Crithidia", "Apicystis")])
par.path$ParasiteRichness <- rowSums(par.path[,c("Phorid", "Crithidia",#
                                               "Apicystis")])
par.path[,c("Phorid", "Crithidia", "Apicystis")]
par.path$ParasiteRichness
colnames(par.path)
par.path$PathogenRichness <- rowSums(par.path[,c("CBPV", "DWV_KV_VDV",#
                                               "ABPV_KBV_IAPV",#
                                               "BQCV","SBPV", "SBV")])
par.path$PathogenRichness
max(par.path$PathogenRichness, na.rm=TRUE)
par.path$AnyParasite <- par.path$ParasiteRichness > 0
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1
par.path$AnyParasite
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Prusch"]  <- "PruschPark"#
#
## community health metrics#
par.path$ParasiteRichness <- rowSums(par.path[,c("Phorid", "Crithidia",#
                                                 "Apicystis")])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
par.path$PathogenRichness <- rowSums(par.path[,c("CBPV", "DWV_KV_VDV",#
                                               "ABPV_KBV_IAPV",#
                                               "BQCV","SBPV", "SBV")])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
## *************************************************************#
## calculate densities to control for garden size#
#
par.path$BeeDensity <- par.path$BeeAbund/par.path$Size#
par.path$BeeRichnessArea <- par.path$BeeRichness/par.path$Size#
#
par.path$WoodyFlowerDensity <- par.path$AbundWoodyFlowers/par.path$Size#
par.path$AnnualFlowerDenisty <-#
    par.path$AbundAnnualFlowers/par.path$Size#
par.path$PlantRichnessArea <- par.path$PlantRichness/par.path$Size#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path, file=file.path(save.dir.git, "specimens-complete.Rdata"))
table(par.path$ParasiteRichness)
table(par.path$ParasiteRichness)/nrow(par.path)
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus"])
par.path
par.path$ParasiteRichness[par.path$Genus == "Bombus"]
par.path[par.path$Genus == "Bombus"]
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])
print("Bombus parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])
print("Bombus pathogens")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogens")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])
par.path[,c("Phorid", "Crithidia",#
                                                 "Apicystis")]
head(par.path[,c("Phorid", "Crithidia",#
                                                 "Apicystis")])
par.path[,c("Phorid", "Crithidia", "Apicystis")][par.path$Genus == "Bombus"]
par.path[,c("Phorid", "Crithidia", "Apicystis")][par.path$Genus == "Bombus",]
par.path$Genus == "Bombus"
par.path[par.path$Genus ==  "Bombus", c("Phorid", "Crithidia", "Apicystis")]
DIM(par.path[par.path$Genus ==  "Bombus", c("Phorid", "Crithidia", "Apicystis")])
dim(par.path[par.path$Genus ==  "Bombus", c("Phorid", "Crithidia", "Apicystis")])
sum(par.path$Genus ==  "Bombus")
colSums(par.path[par.path$Genus ==  "Bombus",#
                 c("Phorid", "Crithidia", "Apicystis")])
colSums(par.path[par.path$Genus ==  "Bombus",#
                 c("Phorid", "Crithidia", "Apicystis")])/#
    sum(par.path$Genus ==  "Bombus")
colSums(par.path[par.path$Genus ==  "Apis",#
                 c("Phorid", "Crithidia", "Apicystis")])/#
    sum(par.path$Genus ==  "Apis")
sum(par.path$Genus ==  "Apis")
parasites <- c("Phorid", "Crithidia", "Apicystis")#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
print("Bombus parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Most common parasite Bombus")#
#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Prusch"]  <- "PruschPark"#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
print("Bombus parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Most common parasite Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Most common parasite Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens)])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
print("Bombus pathogens")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogens")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
print("Most common pathogen Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Most common pathogen Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens])/#
    sum(par.path$Genus ==  "Apis")#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
## *************************************************************#
## calculate densities to control for garden size#
#
par.path$BeeDensity <- par.path$BeeAbund/par.path$Size#
par.path$BeeRichnessArea <- par.path$BeeRichness/par.path$Size#
#
par.path$WoodyFlowerDensity <- par.path$AbundWoodyFlowers/par.path$Size#
par.path$AnnualFlowerDenisty <-#
    par.path$AbundAnnualFlowers/par.path$Size#
par.path$PlantRichnessArea <- par.path$PlantRichness/par.path$Size#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path, file=file.path(save.dir.git, "specimens-complete.Rdata"))
sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))
print("Most common pathogen Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Most common pathogen Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))
unique(par.path$Genus)
par.path$Site
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
print("Bombus parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Most common parasite Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Most common parasite Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens)])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
print("Bombus pathogens")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogens")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Most common pathogen Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Most common pathogen Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
## *************************************************************#
## calculate densities to control for garden size#
#
par.path$BeeDensity <- par.path$BeeAbund/par.path$Size#
par.path$BeeRichnessArea <- par.path$BeeRichness/par.path$Size#
#
par.path$WoodyFlowerDensity <- par.path$AbundWoodyFlowers/par.path$Size#
par.path$AnnualFlowerDenisty <-#
    par.path$AbundAnnualFlowers/par.path$Size#
par.path$PlantRichnessArea <- par.path$PlantRichness/par.path$Size#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path, file=file.path(save.dir.git, "specimens-complete.Rdata"))
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"
unique(par.path$Site)
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
print("Bombus parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Most common parasite Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Most common parasite Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens)])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
print("Bombus pathogens")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogens")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Most common pathogen Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Most common pathogen Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
## *************************************************************#
## calculate densities to control for garden size#
#
par.path$BeeDensity <- par.path$BeeAbund/par.path$Size#
par.path$BeeRichnessArea <- par.path$BeeRichness/par.path$Size#
#
par.path$WoodyFlowerDensity <- par.path$AbundWoodyFlowers/par.path$Size#
par.path$AnnualFlowerDenisty <-#
    par.path$AbundAnnualFlowers/par.path$Size#
par.path$PlantRichnessArea <- par.path$PlantRichness/par.path$Size#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path, file=file.path(save.dir.git, "specimens-complete.Rdata"))
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
print("Bombus parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasites")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Most common parasite Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Most common parasite Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
print("Bombus pathogens")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogens")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Most common pathogen Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Most common pathogen Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
## *************************************************************#
## calculate densities to control for garden size#
#
par.path$BeeDensity <- par.path$BeeAbund/par.path$Size#
par.path$BeeRichnessArea <- par.path$BeeRichness/par.path$Size#
#
par.path$WoodyFlowerDensity <- par.path$AbundWoodyFlowers/par.path$Size#
par.path$AnnualFlowerDenisty <-#
    par.path$AbundAnnualFlowers/par.path$Size#
par.path$PlantRichnessArea <- par.path$PlantRichness/par.path$Size#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path, file=file.path(save.dir.git, "specimens-complete.Rdata"))
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
## *************************************************************#
## calculate densities to control for garden size#
#
par.path$BeeDensity <- par.path$BeeAbund/par.path$Size#
par.path$BeeRichnessArea <- par.path$BeeRichness/par.path$Size#
#
par.path$WoodyFlowerDensity <- par.path$AbundWoodyFlowers/par.path$Size#
par.path$AnnualFlowerDenisty <-#
    par.path$AbundAnnualFlowers/par.path$Size#
par.path$PlantRichnessArea <- par.path$PlantRichness/par.path$Size#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path, file=file.path(save.dir.git, "specimens-complete.Rdata"))
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
#
load("../data/specimens-complete.Rdata")
plot(density(par.path$BeeDensity))
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDenisty",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")
apply(par.path[,path.variables], 2, standardize)
par.path[,path.variables] <- apply(par.path[,path.variables], 2, standardize)
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDenisty",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2, standardize)#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDenisty + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = par.path[par.path$Genus == "Bombus",]),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDenisty,#
                           random = ~ 1 | Site,#
                           data = par.path[par.path$Genus == "Bombus",]))
par.path$Genus == "Bombus",]
par.path[par.path$Genus == "Bombus",]
head(par.path$Genus == "Bombus",])
head(par.path[par.path$Genus == "Bombus",])
apply(par.path[par.path$Genus == "Bombus",], 2, function(x) any(is.na(x)))
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDenisty + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = par.path[par.path$Genus == "Bombus",]),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDenisty,#
                           random = ~ 1 | Site,#
                           data = par.path[par.path$Genus == "Bombus",]))
bombus <- par.path[par.path$Genus == "Bombus",]#
#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDenisty + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = bombus),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDenisty,#
                           random = ~ 1 | Site,#
                           data = bombus))
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDenisty + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = bombus),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDenisty,#
                           random = ~ 1 | Site,#
                           data = bombus))
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
library(lme4)
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDenisty",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2, standardize)#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDenisty + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = bombus),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDenisty,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)#
bombus.mod <- lme4(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDenisty + PlantRichnessArea + (1 | Site),#
                     data = bombus)
bombus.mod <- lmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDenisty + PlantRichnessArea + (1 | Site),#
                     data = bombus)
bombus$AnnualFlowerDenisty
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
## *************************************************************#
## calculate densities to control for garden size#
#
par.path$BeeDensity <- par.path$BeeAbund/par.path$Size#
par.path$BeeRichnessArea <- par.path$BeeRichness/par.path$Size#
#
par.path$WoodyFlowerDensity <- par.path$AbundWoodyFlowers/par.path$Size#
par.path$AnnualFlowerDensity <-#
    par.path$AbundAnnualFlowers/par.path$Size#
par.path$PlantRichnessArea <- par.path$PlantRichness/par.path$Size#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path, file=file.path(save.dir.git, "specimens-complete.Rdata"))
## setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2, standardize)#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDenisty + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = bombus),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDenisty,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)#
bombus.mod <- lmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDenisty + PlantRichnessArea + (1 | Site),#
                     data = bombus)
## setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2, standardize)#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = bombus),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)#
bombus.mod <- lmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + (1 | Site),#
                     data = bombus)
?lmer
bombus.mod <- lmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + (1 | Site),#
                     data = bombus, lmerControl(optimizer = "bobyqa")
bombus.mod <- lmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + (1 | Site),#
                     data = bombus, control=lmerControl(optimizer="bobyqa",#
                      optCtrl=list(maxfun=1e9),  tolPwrss=1e-5)))
bombus.mod <- lmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + (1 | Site),#
                     data = bombus, control=lmerControl(optimizer="bobyqa",#
                      optCtrl=list(maxfun=1e9),  tolPwrss=1e-5))
bombus.mod <- glmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + (1 | Site),#
                     data = bombus, family="Poisson", control=glmerControl(optimizer="bobyqa",#
                      optCtrl=list(maxfun=1e9)))
bombus.mod <- glmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + (1 | Site),#
                     data = bombus, family="poisson", control=glmerControl(optimizer="bobyqa",#
                      optCtrl=list(maxfun=1e9)))
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2, standardize)#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = bombus),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)#
bombus.mod <- glmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + (1 | Site),#
                     data = bombus, family="poisson", control=glmerControl(optimizer="bobyqa",#
                      optCtrl=list(maxfun=1e9)))
warnnings()
warnings()
bombus.mod <- lmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + (1 | Site),#
                     data = bombus, control=lmerControl(optimizer="bobyqa",#
                      optCtrl=list(maxfun=1e9)))
library(lmerTest)
## setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2, standardize)#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = bombus),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)#
bombus.mod <- lmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + (1 | Site),#
                     data = bombus, control=lmerControl(optimizer="bobyqa",#
                      optCtrl=list(maxfun=1e9)))#
summary(bombus.mod)
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
## *************************************************************#
## calculate densities to control for garden size#
#
par.path$BeeDensity <- par.path$BeeAbund/par.path$Size#
par.path$BeeRichnessArea <- par.path$BeeRichness/par.path$Size#
#
par.path$WoodyFlowerDensity <- par.path$AbundWoodyFlowers/par.path$Size#
par.path$AnnualFlowerDensity <-#
    par.path$AbundAnnualFlowers/par.path$Size#
par.path$PlantRichnessArea <- par.path$PlantRichness/par.path$Size#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path,site.char, file=file.path(save.dir.git, "specimens-complete.Rdata"))
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2, standardize)#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = bombus),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = par.path),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea,#
                     random = ~ 1 | Site,#
                     data = par.path),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural2000m + WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + PercentBareSoil,#
                     random = ~ 1 | Site,#
                     data = par.path),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
#
## *************************************************************#
## calculate densities to control for garden size#
#
site.char$BeeDensity <- site.char$BeeAbund/site.char$Size#
site.char$BeeRichnessArea <- site.char$BeeRichness/site.char$Size#
#
site.char$WoodyFlowerDensity <- site.char$AbundWoodyFlowers/site.char$Size#
site.char$AnnualFlowerDensity <-#
    site.char$AbundAnnualFlowers/site.char$Size#
site.char$PlantRichnessArea <- site.char$PlantRichness/site.char$Size#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path,site.char, file=file.path(save.dir.git, "specimens-complete.Rdata"))
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2, standardize)#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea + PercentBareSoil,#
                     random = ~ 1 | Site,#
                     data = par.path),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)#
bee.density.mod <- lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea, data=site.char)
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea +#
                         PercentBareSoil,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
## setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2,#
                                   standardize)#
site.char[,path.variables] <- apply(site.char[,path.variables], 2, standardize)#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea +#
                         PercentBareSoil,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +  natural1000m + WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)#
bee.density.mod <- lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea, data=site.char)#
summary(bee.density.mod)
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2,#
                                   standardize)#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea +#
                         PercentBareSoil,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
bombus.par.richness.mod
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea +#
                         PercentBareSoil,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
bee.density.mod <- lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea, data=site.char)
summary(bee.density.mod)
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea +#
                         PercentBareSoil,#
                         random = ~ 1 | Site,#
                     data = bombus),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
## setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2,#
                                   standardize)#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea +#
                         PercentBareSoil,#
                         random = ~ 1 | Site,#
                     data = par.path),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)#
bee.density.mod <- lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea, data=site.char)#
summary(bee.density.mod)
bee.density.mod <- lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea +#
                         PercentBareSoil,#
                      data=site.char)#
summary(bee.density.mod)
library(car)
bee.density.mod <- lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + PlantRichnessArea +#
                         PercentBareSoil,#
                      data=site.char)
library(car)#
bee.density.mod <- lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity  +#
                         PercentBareSoil,#
                      data=site.char)#
summary(bee.density.mod)
vif(bee.density.mod)
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity +#
                         random = ~ 1 | Site,#
                     data = par.path),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity +#
                         random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2,#
                                   standardize)#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity +#
                         random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
apis <- par.path[par.path$Genus == "Apis",]#
apis.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis))#
summary(apis.par.richness.mod)#
rsquared(apis.par.richness.mod)
## parasite richness in Bombus#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)#
#
## parasite richness in Apis#
apis <- par.path[par.path$Genus == "Apis",]#
apis.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis))#
summary(apis.par.richness.mod)#
rsquared(apis.par.richness.mod)
## pathogens in Bombus#
bombus.path.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    PathogenRichness = lme(PathogenRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus[!is.na(bombus$PathogenRichness)]))#
summary(bombus.path.richness.mod)#
rsquared(bombus.path.richness.mod)
## pathogens in Bombus#
bombus.path.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    PathogenRichness = lme(PathogenRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus[!is.na(bombus$PathogenRichness)],))#
summary(bombus.path.richness.mod)#
rsquared(bombus.path.richness.mod)
is.na(bombus$PathogenRichness)
bombus[!is.na(bombus$PathogenRichness)],)
## pathogens in Bombus#
bombus.path.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    PathogenRichness = lme(PathogenRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus[!is.na(bombus$PathogenRichness),]))#
summary(bombus.path.richness.mod)#
rsquared(bombus.path.richness.mod)
## setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
  (x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2,#
                                   standardize)#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)#
#
## parasite richness in Bombus#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)#
#
## parasite richness in Apis#
apis <- par.path[par.path$Genus == "Apis",]#
apis.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis))#
summary(apis.par.richness.mod)#
rsquared(apis.par.richness.mod)#
## pathogens in Bombus#
bombus.path.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    PathogenRichness = lme(PathogenRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus[!is.na(bombus$PathogenRichness),]))#
summary(bombus.path.richness.mod)#
rsquared(bombus.path.richness.mod)#
#
## pathogen richness in Apis#
apis.path.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                         random = ~ 1 | Site,#
                     data = site.char),#
    PathogenRichness = lme(PathogenRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis[!is.na(apis$PathogenRichness),]))#
summary(apis.path.richness.mod)#
rsquared(apis.path.richness.mod)#
## sanity check using a linear models of Bee density#
library(car)#
bee.density.mod <- lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity  +#
                         PercentBareSoil,#
                      data=site.char)#
#
vif(bee.density.mod)#
summary(bee.density.mod)
head(bombus)
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2,#
                                   standardize)#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)#
## *************************************************************#
## parasite inflection#
## *************************************************************#
##  in Bombus#
bombus.par.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyParasite = lme(AnyParasite ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.infected.mod)#
rsquared(bombus.par.infected.mod)#
#
## parasite infected in Apis#
apis <- par.path[par.path$Genus == "Apis",]#
apis.par.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyParasite = lme(AnyParasite ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis))#
summary(apis.par.infected.mod)#
rsquared(apis.par.infected.mod)
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2,#
                                   standardize)#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)#
## *************************************************************#
## parasite infection#
## *************************************************************#
##  in Bombus#
#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyParasite = lme(AnyParasite ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.infected.mod)#
rsquared(bombus.par.infected.mod)
apis <- par.path[par.path$Genus == "Apis",]#
apis.par.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyParasite = lme(AnyParasite ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis))#
summary(apis.par.infected.mod)#
rsquared(apis.par.infected.mod)
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
## *************************************************************#
## pathogen infection#
## *************************************************************#
##  in Bombus#
bombus.path.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyPathogen = lme(AnyPathogen ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.path.infected.mod)#
rsquared(bombus.path.infected.mod)
apis[!is.na(apis$AnyPathogen),]
## *************************************************************#
## pathogen infection#
## *************************************************************#
##  in Bombus#
bombus.path.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyPathogen = lme(AnyPathogen ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus[!is.na(bombus$AnyPathogen),]))#
summary(bombus.path.infected.mod)#
rsquared(bombus.path.infected.mod)
## pathogen infected in Apis#
apis.path.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyPathogen = lme(AnyPathogen ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis[!is.na(apis$AnyPathogen),]))#
summary(apis.path.infected.mod)#
rsquared(apis.path.infected.mod)
?psem
head(par.path)
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
par.path[,path.variables] <- apply(par.path[,path.variables], 2,#
                                   standardize)#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[,colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
#
## *************************************************************#
## calculate densities to control for garden size#
#
site.char$BeeDensity <- site.char$BeeAbund/site.char$Size#
site.char$BeeRichnessArea <- site.char$BeeRichness/site.char$Size#
#
site.char$WoodyFlowerDensity <- site.char$AbundWoodyFlowers/site.char$Size#
site.char$AnnualFlowerDensity <-#
    site.char$AbundAnnualFlowers/site.char$Size#
site.char$PlantRichnessArea <- site.char$PlantRichness/site.char$Size#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)#
#
dim(par.path)#
#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path,site.char, file=file.path(save.dir.git, "specimens-complete.Rdata"))
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
## *************************************************************#
## parasite infection#
## *************************************************************#
##  in Bombus#
#
bombus <- par.path[par.path$Genus == "Bombus",]#
bombus.par.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyParasite = lme(AnyParasite ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.infected.mod)#
rsquared(bombus.par.infected.mod)
## parasite infected in Apis#
apis <- par.path[par.path$Genus == "Apis",]#
apis.par.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyParasite = lme(AnyParasite ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis))#
summary(apis.par.infected.mod)#
rsquared(apis.par.infected.mod)
## *************************************************************#
## parasite richness#
## *************************************************************#
bombus.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
## parasite richness in Apis#
apis <- par.path[par.path$Genus == "Apis",]#
apis.par.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis))#
summary(apis.par.richness.mod)#
rsquared(apis.par.richness.mod)
## *************************************************************#
## pathogen richness#
## *************************************************************#
## in Bombus#
bombus.path.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    PathogenRichness = lme(PathogenRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus[!is.na(bombus$PathogenRichness),]))#
summary(bombus.path.richness.mod)#
rsquared(bombus.path.richness.mod)
## pathogen richness in Apis#
apis.path.richness.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    PathogenRichness = lme(PathogenRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis[!is.na(apis$PathogenRichness),]))#
summary(apis.path.richness.mod)#
rsquared(apis.path.richness.mod)
## *************************************************************#
## pathogen infection#
## *************************************************************#
##  in Bombus#
bombus.path.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyPathogen = lme(AnyPathogen ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus[!is.na(bombus$AnyPathogen),]))#
summary(bombus.path.infected.mod)#
rsquared(bombus.path.infected.mod)#
#
## pathogen infected in Apis#
apis.path.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    AnyPathogen = lme(AnyPathogen ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis[!is.na(apis$AnyPathogen),]))#
summary(apis.path.infected.mod)#
rsquared(apis.path.infected.mod)
bombus <- par.path[par.path$Genus == "Bombus",]#
#
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = lme(Phorid ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.Phorid.infected.mod)#
rsquared(bombus.Phorid.infected.mod)
## in Apis#
apis <- par.path[par.path$Genus == "Apis",]#
apis.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = lme(Phorid ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis))#
summary(apis.Phorid.infected.mod)#
rsquared(apis.Phorid.infected.mod)
?glme
apis.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glme(Phorid ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                  random = ~ 1 | Site,#
                  family="binomial",#
                           data = apis))#
summary(apis.Phorid.infected.mod)#
rsquared(apis.Phorid.infected.mod)
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
bombus <- par.path[par.path$Genus == "Bombus",]#
apis <- par.path[par.path$Genus == "Apis",]#
#
## *************************************************************#
## Phorid#
## *************************************************************#
##  in Bombus#
#
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glme(Phorid ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity,#
                  random = ~ 1 | Site,#
                  family="binomial",#
                  data = bombus))#
summary(bombus.Phorid.infected.mod)#
rsquared(bombus.Phorid.infected.mod)
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glm(Phorid ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity,#
                  random = ~ 1 | Site,#
                  family="binomial",#
                  data = bombus))
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glmer(Phorid ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity,#
                  random = ~ 1 | Site,#
                  family="binomial",#
                  data = bombus))
?glmer
par.path$trail <- 1
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glmer(cbind(Phorid, trial) ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity + (1 | Site),#
                  family="binomial",#
                  data = bombus))
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glmer(cbind(Phorid, trial) ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity + (1 | Site),#
                  family="binomial",#
                  data = bombus))#
#
summary(bombus.Phorid.infected.mod)#
rsquared(bombus.Phorid.infected.mod)
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glmer(Phorid ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity + (1 | Site),#
                  family="binomial",#
                  data = bombus))
par.path$BeeDensity
par.path[parasites]
head(par.path[parasites])
aggregate(par.path[parasites],#
          list(par.path$Site,#
               par.path$Genus),#
          sum)
parasite.totals <- aggregate(par.path[parasites],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                             sum)
parasite.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                             sum)
parasite.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                             sum, na.rm=TRUE)
parasite.totals
sick.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                             sum, na.rm=TRUE)
run.path.apis <- sum(par.path$Genus ==  "Apis" &#
                     !is.na(par.path$CBPV))#
run.path.bombus <- sum(par.path$Genus ==  "Bombus" &#
                       !is.na(par.path$CBPV))
screened.par.apis <- sum(par.path$Genus ==  "Apis")#
screened.par.bombus <- sum(par.path$Genus ==  "Bombus")#
#
screened.path.apis <- sum(par.path$Genus ==  "Apis" &#
                     !is.na(par.path$CBPV))#
screened.path.bombus <- sum(par.path$Genus ==  "Bombus" &#
                       !is.na(par.path$CBPV))
sick.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                             sum, na.rm=TRUE)#
sick.totals$ScreenParApis <- sum(par.path$Genus ==  "Apis")
sick.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                             sum, na.rm=TRUE)#
sick.totals$ScreenParApis <- sum(par.path$Genus ==  "Apis")#
sick.totals$ScreenParBombus <- sum(par.path$Genus ==  "Bombus")#
sick.totals$ScreenPathApis <- sum(par.path$Genus ==  "Apis" &#
                     !is.na(par.path$CBPV))#
sick.totals$ScreenPathBombus <- sum(par.path$Genus ==  "Bombus" &#
                       !is.na(par.path$CBPV))
## *************************************************************#
## standardize varaibles#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)
## *************************************************************#
## merge pathogen and site data#
#
dim(par.path)#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
sick.totals <- merge(sick.totals, site.char)
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[, colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
#
## *************************************************************#
## calculate densities to control for garden size#
#
site.char$BeeDensity <- site.char$BeeAbund/site.char$Size#
site.char$BeeRichnessArea <- site.char$BeeRichness/site.char$Size#
#
site.char$WoodyFlowerDensity <- site.char$AbundWoodyFlowers/site.char$Size#
site.char$AnnualFlowerDensity <-#
    site.char$AbundAnnualFlowers/site.char$Size#
site.char$PlantRichnessArea <- site.char$PlantRichness/site.char$Size#
#
## *************************************************************#
## calculate total sick individuals for each site, bad thing#
#
sick.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                             sum, na.rm=TRUE)#
sick.totals$ScreenParApis <- sum(par.path$Genus ==  "Apis")#
sick.totals$ScreenParBombus <- sum(par.path$Genus ==  "Bombus")#
sick.totals$ScreenPathApis <- sum(par.path$Genus ==  "Apis" &#
                     !is.na(par.path$CBPV))#
sick.totals$ScreenPathBombus <- sum(par.path$Genus ==  "Bombus" &#
                       !is.na(par.path$CBPV))#
#
## *************************************************************#
## standardize varaibles#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)#
#
## *************************************************************#
## merge pathogen and site data#
#
dim(par.path)#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
sick.totals <- merge(sick.totals, site.char)#
#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path,site.char, file=file.path(save.dir.git, "specimens-complete.Rdata"))
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")
bombus <- par.path[par.path$Genus == "Bombus",]#
apis <- par.path[par.path$Genus == "Apis",]
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[, colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
#
## *************************************************************#
## calculate densities to control for garden size#
#
site.char$BeeDensity <- site.char$BeeAbund/site.char$Size#
site.char$BeeRichnessArea <- site.char$BeeRichness/site.char$Size#
#
site.char$WoodyFlowerDensity <- site.char$AbundWoodyFlowers/site.char$Size#
site.char$AnnualFlowerDensity <-#
    site.char$AbundAnnualFlowers/site.char$Size#
site.char$PlantRichnessArea <- site.char$PlantRichness/site.char$Size#
#
## *************************************************************#
## calculate total sick individuals for each site, bad thing#
#
sick.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                             sum, na.rm=TRUE)#
sick.totals$ScreenParApis <- sum(par.path$Genus ==  "Apis")#
sick.totals$ScreenParBombus <- sum(par.path$Genus ==  "Bombus")#
sick.totals$ScreenPathApis <- sum(par.path$Genus ==  "Apis" &#
                     !is.na(par.path$CBPV))#
sick.totals$ScreenPathBombus <- sum(par.path$Genus ==  "Bombus" &#
                       !is.na(par.path$CBPV))#
#
## *************************************************************#
## standardize varaibles#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)#
#
## *************************************************************#
## merge pathogen and site data#
#
dim(par.path)#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
sick.totals <- merge(sick.totals, site.char)#
#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path,#
     site.char, sick.totals,#
     file=file.path(save.dir.git, "specimens-complete.Rdata"))
bombus <- sick.totals[sick.totals$Genus == "Bombus",]#
apis <- sick.totals[sick.totals$Genus == "Apis",]
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glm(cbind(Phorid, ScreenParBombus) ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
bombus <- sick.totals[sick.totals$Genus == "Bombus",]#
apis <- sick.totals[sick.totals$Genus == "Apis",]#
## *************************************************************#
## Phorid#
## *************************************************************#
##  in Bombus#
#
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glm(cbind(bombus$Phorid, bombus$ScreenParBombus) ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
bombus$ScreenParBombus
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[, colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
#
## *************************************************************#
## calculate densities to control for garden size#
#
site.char$BeeDensity <- site.char$BeeAbund/site.char$Size#
site.char$BeeRichnessArea <- site.char$BeeRichness/site.char$Size#
#
site.char$WoodyFlowerDensity <- site.char$AbundWoodyFlowers/site.char$Size#
site.char$AnnualFlowerDensity <-#
    site.char$AbundAnnualFlowers/site.char$Size#
site.char$PlantRichnessArea <- site.char$PlantRichness/site.char$Size#
#
## *************************************************************#
## calculate total sick individuals for each site, bad thing
sick.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                         sum, na.rm=TRUE)
tested.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                         function(x) sum(!is.na(x)))
tested.totals
sick.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                         sum, na.rm=TRUE)#
#
tested.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                         function(x) sum(!is.na(x)))#
#
sick.totals$ScreenedPath <- tested.totals$CBPV#
sick.totals$ScreenedPar <- tested.totals$Phorid
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[, colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
#
## *************************************************************#
## calculate densities to control for garden size#
#
site.char$BeeDensity <- site.char$BeeAbund/site.char$Size#
site.char$BeeRichnessArea <- site.char$BeeRichness/site.char$Size#
#
site.char$WoodyFlowerDensity <- site.char$AbundWoodyFlowers/site.char$Size#
site.char$AnnualFlowerDensity <-#
    site.char$AbundAnnualFlowers/site.char$Size#
site.char$PlantRichnessArea <- site.char$PlantRichness/site.char$Size#
#
## *************************************************************#
## calculate total sick individuals for each site, bad thing#
#
sick.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                         sum, na.rm=TRUE)#
#
tested.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                         function(x) sum(!is.na(x)))#
#
sick.totals$ScreenedPath <- tested.totals$CBPV#
sick.totals$ScreenedPar <- tested.totals$Phorid#
#
## *************************************************************#
## standardize varaibles#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)#
#
## *************************************************************#
## merge pathogen and site data#
#
dim(par.path)#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
sick.totals <- merge(sick.totals, site.char)#
#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                           "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path,#
     site.char, sick.totals,#
     file=file.path(save.dir.git, "specimens-complete.Rdata"))
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glm(cbind(bombus$Phorid, bombus$ScreenParBombus) ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
bombus$ScreenPar
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glm(cbind(bombus$Phorid, bombus$ScreenedPar) ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
summary(bombus.Phorid.infected.mod)#
rsquared(bombus.Phorid.infected.mod)
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glm(cbind(Phorid, ScreenedPar) ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lme(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     random = ~ 1 | Site,#
                     data = site.char),#
    Phorid = glm(cbind(bombus$Phorid, bombus$ScreenedPar) ~ bombus$BeeDensity +#
                      bombus$natural1000m +#
                      bombus$WoodyFlowerDensity +#
                      bombus$AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = site.char),#
    Phorid = glm(cbind(bombus$Phorid, bombus$ScreenedPar) ~ bombus$BeeDensity +#
                      bombus$natural1000m +#
                      bombus$WoodyFlowerDensity +#
                      bombus$AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
bombus$WoodyFlowerDensity
bombus$AnnualFlowerDensity
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = bombus),#
    Phorid = glm(cbind(bombus$Phorid, bombus$ScreenedPar) ~ bombus$BeeDensity +#
                      bombus$natural1000m +#
                      bombus$WoodyFlowerDensity +#
                      bombus$AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(bombus$BeeDensity ~ bombus$natural1000m + bombus$WoodyFlowerDensity +#
                         bombus$AnnualFlowerDensity),#
    Phorid = glm(cbind(bombus$Phorid, bombus$ScreenedPar) ~ bombus$BeeDensity +#
                      bombus$natural1000m +#
                      bombus$WoodyFlowerDensity +#
                      bombus$AnnualFlowerDensity,#
                  family="binomial")
)
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(bombus$BeeDensity ~ bombus$natural1000m + bombus$WoodyFlowerDensity +#
                         bombus$AnnualFlowerDensity),#
    Phorid = glm(cbind(bombus$Phorid, bombus$ScreenedPar) ~ bombus$BeeDensity +#
                      bombus$natural1000m +#
                      bombus$WoodyFlowerDensity +#
                      bombus$AnnualFlowerDensity,#
                  family="binomial"))
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
bombus <- sick.totals[sick.totals$Genus == "Bombus",]#
apis <- sick.totals[sick.totals$Genus == "Apis",]#
## *************************************************************#
## Phorid#
## *************************************************************#
##  in Bombus#
#
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = bombus),#
    Phorid = glm(cbind(bombus$Phorid, bombus$ScreenedPar) ~ bombus$BeeDensity +#
                      bombus$natural1000m +#
                      bombus$WoodyFlowerDensity +#
                      bombus$AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
summary(bombus.Phorid.infected.mod, conserve = TRUE)
?summary
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
bombus <- par.path[par.path$Genus == "Bombus",]#
apis <- par.path[par.path$Genus == "Apis",]
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity + (1|Site),#
                     data = bombus),#
    Phorid = glmer(Phorid ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = bombus),#
    Phorid = glmer(Phorid ~ BeeDensity +#
                      natural1000m +#
                      WoodyFlowerDensity +#
                      AnnualFlowerDensity,#
                  family="binomial",#
                  data = bombus))
rsquared(bombus.Phorid.infected.mod)
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lmer(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity  + (1|Site),#
                    data = bombus),#
    Phorid = glmer(Phorid ~ BeeDensity +#
                       natural1000m +#
                       WoodyFlowerDensity +#
                       AnnualFlowerDensity  + (1|Site),#
                   family="binomial",#
                   data = bombus))
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
bombus <- par.path[par.path$Genus == "Bombus",]#
apis <- par.path[par.path$Genus == "Apis",]#
#
## *************************************************************#
## parasite infection#
## *************************************************************#
##  in Bombus#
bombus.par.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = site.char),#
    AnyParasite = lme(AnyParasite ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.infected.mod)#
rsquared(bombus.par.infected.mod)
apis.par.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = site.char),#
    AnyParasite = lme(AnyParasite ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis))#
summary(apis.par.infected.mod)#
rsquared(apis.par.infected.mod)
## *************************************************************#
## parasite richness#
## *************************************************************#
bombus.par.richness.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus))#
summary(bombus.par.richness.mod)#
rsquared(bombus.par.richness.mod)
## parasite richness in Apis#
apis <- par.path[par.path$Genus == "Apis",]#
apis.par.richness.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = site.char),#
    ParasiteRichness = lme(ParasiteRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis))#
summary(apis.par.richness.mod)#
rsquared(apis.par.richness.mod)
## *************************************************************#
## pathogen richness#
## *************************************************************#
## in Bombus#
bombus.path.richness.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = site.char),#
    PathogenRichness = lme(PathogenRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = bombus[!is.na(bombus$PathogenRichness),]))#
summary(bombus.path.richness.mod)#
rsquared(bombus.path.richness.mod)
## pathogen richness in Apis#
apis.path.richness.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = site.char),#
    PathogenRichness = lme(PathogenRichness ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis[!is.na(apis$PathogenRichness),]))#
summary(apis.path.richness.mod)#
rsquared(apis.path.richness.mod)
## pathogen infected in Apis#
apis.path.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                         AnnualFlowerDensity,#
                     data = site.char),#
    AnyPathogen = lme(AnyPathogen ~ BeeDensity +#
                               natural1000m +#
                               WoodyFlowerDensity +#
                               AnnualFlowerDensity,#
                           random = ~ 1 | Site,#
                           data = apis[!is.na(apis$AnyPathogen),]))#
summary(apis.path.infected.mod)#
rsquared(apis.path.infected.mod)
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
bombus <- par.path[par.path$Genus == "Bombus",]#
apis <- par.path[par.path$Genus == "Apis",]#
## *************************************************************#
## Phorid#
## *************************************************************#
##  in Bombus#
#
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = bombus),#
    Phorid = glmer(Phorid ~ BeeDensity +#
                       natural1000m +#
                       WoodyFlowerDensity +#
                       AnnualFlowerDensity  + (1|Site),#
                   family="binomial",#
                   data = bombus))#
#
summary(bombus.Phorid.infected.mod)
mod.bombus <- glmer(Phorid ~ BeeDensity +#
                       natural1000m +#
                       WoodyFlowerDensity +#
                       AnnualFlowerDensity  + (1|Site),#
                   family="binomial",#
                   data = bombus)
summary(mod.bombus)
mod.bombus <- glmer(Phorid ~ BeeDensity +#
                       natural1000m +#
                       WoodyFlowerDensity +#
                       AnnualFlowerDensity  + (1|Site),#
                   family="binomial",#
                   data = bombus)#
#
summary(mod.bombus)
head(sick.totals)
mod.bombus <- glmer(c(Phorid, ScreenedPar) ~ BeeDensity +#
                       natural1000m +#
                       WoodyFlowerDensity +#
                       AnnualFlowerDensity  + (1|Site),#
                   family="binomial",#
                   data = bombus)#
#
summary(mod.bombus)
mod.bombus <- glmer(c(bombus$Phorid,  bombus$ScreenedPar) ~ BeeDensity +#
                       natural1000m +#
                       WoodyFlowerDensity +#
                       AnnualFlowerDensity  + (1|Site),#
                   family="binomial",#
                   data = bombus)
mod.bombus <- glm(c(bombus$Phorid,  bombus$ScreenedPar) ~ bombus$BeeDensity +#
                       bombus$natural1000m +#
                       bombus$WoodyFlowerDensity +#
                       bombus$AnnualFlowerDensity,#
                   family="binomial",#
                   data = bombus)
bombus$Phorid
bombus$ScreenedPar
bombus$BeeDensity
bombus$natural1000m
mod.bombus <- glm(c(bombus$Phorid,  bombus$ScreenedPar) ~ bombus$BeeDensity +#
                       bombus$natural1000m +#
                       bombus$WoodyFlowerDensity +#
                       bombus$AnnualFlowerDensity,#
                   family="binomial")
?glm
rm(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[, colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
          "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
          "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
          "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
#
## *************************************************************#
## calculate densities to control for garden size#
#
site.char$BeeDensity <- site.char$BeeAbund/site.char$Size#
site.char$BeeRichnessArea <- site.char$BeeRichness/site.char$Size#
#
site.char$WoodyFlowerDensity <- site.char$AbundWoodyFlowers/site.char$Size#
site.char$AnnualFlowerDensity <-#
    site.char$AbundAnnualFlowers/site.char$Size#
site.char$PlantRichnessArea <- site.char$PlantRichness/site.char$Size#
#
## *************************************************************#
## calculate total sick individuals for each site, bad thing#
#
sick.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                         sum, na.rm=TRUE)#
#
tested.totals <- aggregate(par.path[c(parasites, pathogens)],#
                             list(Site=par.path$Site,#
                                  Genus=par.path$Genus),#
                         function(x) sum(!is.na(x)))#
#
sick.totals$ScreenedPath <- tested.totals$CBPV#
sick.totals$ScreenedPar <- tested.totals$Phorid
sick.totals[,parasites]/sick.totals$ScreenedPar
sick.totals[,pathogens] <-#
    sick.totals[,pathogens]/sick.totals$ScreenedPath
sick.totals
m(list=ls())#
## prepares raw data and creates dataset for analyses#
#
save.dir <- "~/Dropbox/urbanbeeparasites_saved"#
bees <- read.csv(file.path(save.dir,#
                           "BeeDiversity/BeeIDs2per2015.csv"),#
                 stringsAsFactors=FALSE)#
veg <- read.csv(file.path(save.dir,#
                          "VegData/VegData2Per2015.csv"),#
                stringsAsFactors=FALSE)#
apisPP <- read.csv(file.path(save.dir,#
                             "Parasitism/ApisParasitism.csv"))#
vosPP <- read.csv(file.path(save.dir,#
                            "Parasitism/BombusVosParasitism.csv"),#
                  stringsAsFactors=FALSE)#
#
## *************************************************************#
## standardize columns between apis and bombus data#
apisPP$IDNum <- NULL#
vosPP$Date <- NA#
vosPP$Genus  <- "Bombus"#
vosPP$Species  <- "vosnesenskii"#
vosPP <- vosPP[, colnames(apisPP)]#
#
## create a single parasite and pathogen dataset for both species#
par.path <- rbind(apisPP, vosPP)#
#
## fix site names to match between datasets#
par.path$Site <- as.character(par.path$Site)#
par.path$Site[par.path$Site ==#
              "Coyote"]  <- "CoyoteCreek"#
par.path$Site[par.path$Site ==#
              "Beach"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
              "Beach Flats"]  <- "BeachFlats"#
par.path$Site[par.path$Site ==#
              "La Colina"]  <- "LaColina"#
par.path$Site[par.path$Site ==#
              "Laguna "]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Laguna"]  <- "LagunaSeca"#
par.path$Site[par.path$Site ==#
              "Prusch"]  <- "PruschPark"#
#
## drop all the controls#
par.path <- par.path[!par.path$Site == "Control",]#
#
## community health metrics#
parasites <- c("Phorid", "Crithidia", "Apicystis")#
#
pathogens <- c("CBPV", "DWV_KV_VDV", "ABPV_KBV_IAPV", "BQCV","SBPV", "SBV")#
#
par.path$ParasiteRichness <- rowSums(par.path[,parasites])#
par.path$AnyParasite <- (par.path$ParasiteRichness > 0)*1#
#
## *************************************************************#
print("Bombus parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Bombus"])/nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis parasite richness")#
table(par.path$ParasiteRichness[par.path$Genus == "Apis"])/nrow(par.path[par.path$Genus == "Apis",])#
#
print("Parasites Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", parasites])/#
    sum(par.path$Genus ==  "Bombus")#
#
print("Parasites Apis")#
colSums(par.path[par.path$Genus ==  "Apis", parasites])/#
    sum(par.path$Genus ==  "Apis")#
#
par.path$PathogenRichness <- rowSums(par.path[, pathogens])#
par.path$AnyPathogen <- (par.path$PathogenRichness > 0)*1#
#
print("Bombus pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Bombus"])/#
    nrow(par.path[par.path$Genus == "Bombus",])#
#
print("Apis pathogen richness")#
table(par.path$PathogenRichness[par.path$Genus == "Apis"])/#
    nrow(par.path[par.path$Genus == "Apis",])#
#
print("Pathogens Bombus")#
colSums(par.path[par.path$Genus ==  "Bombus", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Bombus" & !is.na(par.path$CBPV))#
#
print("Pathogens Apis")#
colSums(par.path[par.path$Genus ==  "Apis", pathogens], na.rm=TRUE)/#
    sum(par.path$Genus ==  "Apis" & !is.na(par.path$CBPV))#
#
## *************************************************************#
## fix IDs#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Agapostemon coloradinus"]  <- "Agapostemon texanus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Peponapis sp."]  <- "Peponapis pruinosa"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Halictus sp."]  <- "Halictus tripartitus"#
bees$genus_sub_sp[bees$genus_sub_sp ==#
                  "Anthophora sp."]  <- "Anthophora urbana"#
#
## fix site names to match between datasets#
bees$site[bees$site ==#
          "Coyote Creek"]  <- "CoyoteCreek"#
bees$site[bees$site ==#
          "Beach Flats"]  <- "BeachFlats"#
bees$site[bees$site ==#
          "La Colina"]  <- "LaColina"#
bees$site[bees$site ==#
          "MEarth"]  <- "Mearth"#
bees$site[bees$site ==#
          "Laguna Seca"]  <- "LagunaSeca"#
bees$site[bees$site ==#
          "Prusch"]  <- "PruschPark"#
#
## *************************************************************#
## calculate site level characteristics for bees#
## abundance (average between sample rounds)#
abund.SR.bees <- aggregate(list(Abund=bees$no_individuals),#
                           list(Site=bees$site,#
                                SampleRound=bees$sample_pd),#
                           sum)#
#
abund.SR.bees <- tapply(abund.SR.bees$Abund,#
                        abund.SR.bees$Site, mean)#
#
## richness (total for a site)#
site.bees <- aggregate(list(BeeRichness=bees$genus_sub_sp),#
                       list(Site=bees$site),#
                       function(x) length(unique(x)))#
#
site.bees$BeeAbund <- abund.SR.bees[match(names(abund.SR.bees),#
                                          site.bees$Site)]#
#
## *************************************************************#
## calculate site level characteristics for veg and merge with bee data#
#
veg.site <- aggregate(list(AbundWoodyFlowers=veg$NoTreeShrubsFlower,#
                           AbundAnnualFlowers=veg$NumTotalFlowers,#
                           PlantRichness=veg$NumHerbPlantSpp,#
                           PercentBareSoil=veg$PercentBareSoil),#
                      list(Site=veg$Site),#
                      mean)#
#
site.char <- merge(veg.site, site.bees)#
#
site.char <- merge(site.char,#
                   unique(veg[, c("Site", "Size", "natural1000m",#
                                  "natural2000m")]))#
#
## *************************************************************#
## calculate densities to control for garden size#
#
site.char$BeeDensity <- site.char$BeeAbund/site.char$Size#
site.char$BeeRichnessArea <- site.char$BeeRichness/site.char$Size#
#
site.char$WoodyFlowerDensity <- site.char$AbundWoodyFlowers/site.char$Size#
site.char$AnnualFlowerDensity <-#
    site.char$AbundAnnualFlowers/site.char$Size#
site.char$PlantRichnessArea <- site.char$PlantRichness/site.char$Size#
#
## *************************************************************#
## calculate total sick individuals for each site, bad thing#
#
sick.totals <- aggregate(par.path[c(parasites, pathogens)],#
                         list(Site=par.path$Site,#
                              Genus=par.path$Genus),#
                         sum, na.rm=TRUE)#
#
tested.totals <- aggregate(par.path[c(parasites, pathogens)],#
                           list(Site=par.path$Site,#
                                Genus=par.path$Genus),#
                           function(x) sum(!is.na(x)))#
#
sick.totals$ScreenedPath <- tested.totals$CBPV#
sick.totals$ScreenedPar <- tested.totals$Phorid#
#
sick.totals[,parasites] <-#
    sick.totals[,parasites]/sick.totals$ScreenedPar#
sick.totals[,pathogens] <-#
    sick.totals[,pathogens]/sick.totals$ScreenedPath#
#
## *************************************************************#
## standardize varaibles#
path.variables <- c("WoodyFlowerDensity", "AnnualFlowerDensity",#
                    "PlantRichnessArea", "natural1000m",#
                    "natural2000m", "PercentBareSoil", "BeeDensity")#
#
standardize <- function(x)#
(x-mean(x, na.rm=TRUE))/sd(x, na.rm=TRUE)#
#
site.char[,path.variables] <- apply(site.char[,path.variables], 2,#
                                    standardize)#
#
## *************************************************************#
## merge pathogen and site data#
#
dim(par.path)#
## okay to drop controls#
par.path$Site[!par.path$Site %in% site.char$Site]#
#
par.path <- merge(par.path, site.char)#
dim(par.path)#
#
sick.totals <- merge(sick.totals, site.char)#
#
## write out final data#
write.csv(par.path, file=file.path(save.dir,#
                                   "specimens-complete.csv"), row.names=FALSE)#
#
save.dir.git <- "~/Dropbox/urbanbeeparasites/data"#
save(par.path,#
     site.char, sick.totals,#
     file=file.path(save.dir.git, "specimens-complete.Rdata"))
setwd("~/Dropbox/urbanbeeparasites")#
setwd("analyses")#
rm(list=ls())#
library(piecewiseSEM)#
library(nlme)#
library(lme4)#
library(lmerTest)#
#
load("../data/specimens-complete.Rdata")#
#
bombus <- sick.totals[sick.totals$Genus == "Bombus",]#
apis <- sick.totals[sick.totals$Genus == "Apis",]
bombus
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = bombus),#
    Phorid = glmer(Phorid ~ BeeDensity +#
                       natural1000m +#
                       WoodyFlowerDensity +#
                       AnnualFlowerDensity  + (1|Site),#
                   family="binomial",#
                   data = bombus))
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = bombus),#
    Phorid = glm(Phorid ~ BeeDensity +#
                       natural1000m +#
                       WoodyFlowerDensity +#
                       AnnualFlowerDensity,#
                   family="binomial",#
                   data = bombus))
colnames(bombus)
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = bombus),#
    Phorid = glm(Phorid ~ BeeDensity +#
                     natural1000m +#
                     WoodyFlowerDensity +#
                     AnnualFlowerDensity,#
                 weights=ScreenedPar#
                 family="binomial",#
                 data = bombus))
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = bombus),#
    Phorid = glm(Phorid ~ BeeDensity +#
                     natural1000m +#
                     WoodyFlowerDensity +#
                     AnnualFlowerDensity,#
                 weights=ScreenedPar,#
                 family="binomial",#
                 data = bombus))
sick.total
bombus.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = site.char),#
    Phorid = glm(Phorid ~ BeeDensity +#
                     natural1000m +#
                     WoodyFlowerDensity +#
                     AnnualFlowerDensity,#
                 weights=ScreenedPar,#
                 family="binomial",#
                 data = bombus))
summary(bombus.Phorid.infected.mod)
apis.Phorid.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = site.char),#
    Phorid = glm(Phorid ~ BeeDensity +#
                     natural1000m +#
                     WoodyFlowerDensity +#
                     AnnualFlowerDensity,#
                 weights=ScreenedPar,#
                 family="binomial",#
                 data = apis))#
#
summary(apis.Phorid.infected.mod)#
rsquared(apis.Phorid.infected.mod)
## *************************************************************#
## Crithidia#
## *************************************************************#
##  in Bombus#
bombus.Crithidia.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = site.char),#
    Crithidia = glm(Crithidia ~ BeeDensity +#
                     natural1000m +#
                     WoodyFlowerDensity +#
                     AnnualFlowerDensity,#
                 weights=ScreenedPar,#
                 family="binomial",#
                 data = bombus))#
#
summary(bombus.Crithidia.infected.mod)#
rsquared(bombus.Crithidia.infected.mod)
## in Apis#
apis.Crithidia.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = site.char),#
    Crithidia = glm(Crithidia ~ BeeDensity +#
                     natural1000m +#
                     WoodyFlowerDensity +#
                     AnnualFlowerDensity,#
                 weights=ScreenedPar,#
                 family="binomial",#
                 data = apis))#
#
summary(apis.Crithidia.infected.mod)#
rsquared(apis.Crithidia.infected.mod)
## *************************************************************#
## Apicystis#
## *************************************************************#
##  in Bombus#
bombus.Apicystis.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = site.char),#
    Apicystis = glm(Apicystis ~ BeeDensity +#
                     natural1000m +#
                     WoodyFlowerDensity +#
                     AnnualFlowerDensity,#
                 weights=ScreenedPar,#
                 family="binomial",#
                 data = bombus))#
#
summary(bombus.Apicystis.infected.mod)#
rsquared(bombus.Apicystis.infected.mod)#
#
## in Apis#
apis.Apicystis.infected.mod = psem(#
    BeeDensity = lm(BeeDensity ~ natural1000m + WoodyFlowerDensity +#
                        AnnualFlowerDensity,#
                    data = site.char),#
    Apicystis = glm(Apicystis ~ BeeDensity +#
                     natural1000m +#
                     WoodyFlowerDensity +#
                     AnnualFlowerDensity,#
                 weights=ScreenedPar,#
                 family="binomial",#
                 data = apis))#
#
summary(apis.Apicystis.infected.mod)#
rsquared(apis.Apicystis.infected.mod)
